/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/index.ts":
/*!******************************!*\
  !*** ./src/scripts/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst narrativeManager_1 = __webpack_require__(/*! ./managers/narrativeManager */ \"./src/scripts/managers/narrativeManager.ts\");\n/// Import all the important things\n__webpack_require__(/*! ./models/npc */ \"./src/scripts/models/npc.ts\");\n__webpack_require__(/*! ./models/requirement */ \"./src/scripts/models/requirement.ts\");\n__webpack_require__(/*! ./models/storylet */ \"./src/scripts/models/storylet.ts\");\n__webpack_require__(/*! ./managers/npcManager */ \"./src/scripts/managers/npcManager.ts\");\n__webpack_require__(/*! ./managers/narrativeManager */ \"./src/scripts/managers/narrativeManager.ts\");\n__webpack_require__(/*! ./utils/database */ \"./src/scripts/utils/database.ts\");\n__webpack_require__(/*! ./utils/serialize */ \"./src/scripts/utils/serialize.ts\");\n__webpack_require__(/*! ./utils/arrays */ \"./src/scripts/utils/arrays.ts\");\n__webpack_require__(/*! ./macros/storylets */ \"./src/scripts/macros/storylets.ts\");\n__webpack_require__(/*! ./macros/note */ \"./src/scripts/macros/note.ts\");\n__webpack_require__(/*! ./macros/tabs */ \"./src/scripts/macros/tabs.ts\");\nconst storylet_1 = __webpack_require__(/*! ./models/storylet */ \"./src/scripts/models/storylet.ts\");\nconst requirement_1 = __webpack_require__(/*! ./models/requirement */ \"./src/scripts/models/requirement.ts\");\nSave.onSave.add((save, details) => {\n    // Save all storylet informations\n    save.metadata = {\n        playedStorylets: narrativeManager_1.NarrativeManager.playedStorylets,\n    };\n});\nSave.onLoad.add((save) => {\n    // Load all storylet informations\n    narrativeManager_1.NarrativeManager.playedStorylets = save.metadata.playedStorylets;\n});\nnarrativeManager_1.NarrativeManager.addStorylets([\n    new storylet_1.Storylet(\"base:intro\", \"Introduction\", \"nyaleph\", {\n        base_intro_start: null,\n        base_intro_end: null,\n    }, \"base_intro_start\", 1, 0, undefined, false, {\n        npc1: new requirement_1.RequirementLastName(\"Blofis\"),\n        npc2: new requirement_1.RequirementAlways(true),\n    }, new Set([\"base\", \"intro\"]))\n], true);\nnarrativeManager_1.NarrativeManager.addStorylet(new storylet_1.Storylet(\"base:outro\", \"Outro\", \"nyaleph\", {\n    base_outro_start: null,\n    base_outro_end: null,\n}, \"base_outro_start\", 1, 0, new requirement_1.RequirementStoryletPlayed(\"base:intro\")), true);\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/index.ts?");

/***/ }),

/***/ "./src/scripts/macros/note.ts":
/*!************************************!*\
  !*** ./src/scripts/macros/note.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nMacro.add('note', {\n    tags: null,\n    handler() {\n        const type = this.args[0] ?? 'note';\n        const message = this.payload[0].contents;\n        $(this.output).append($('<div>', { class: `message ${type}` })\n            .append($('<div>', { class: 'message-type', text: type }), $('<div>', { class: 'message-content' }).wiki(message)));\n    }\n});\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/macros/note.ts?");

/***/ }),

/***/ "./src/scripts/macros/storylets.ts":
/*!*****************************************!*\
  !*** ./src/scripts/macros/storylets.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst narrativeManager_1 = __webpack_require__(/*! ../managers/narrativeManager */ \"./src/scripts/managers/narrativeManager.ts\");\nMacro.add(\"storylet\", {\n    handler() {\n        let storyletId;\n        let storylet;\n        let npcs;\n        let message = this.args[0] ?? \"Continue\";\n        if (this.args.length >= 2) {\n            storyletId = this.args[1];\n            storylet = narrativeManager_1.NarrativeManager.getStorylet(storyletId);\n            npcs = State.variables.npcManager.findNPCs(storylet.npcs);\n        }\n        else {\n            let _res = narrativeManager_1.NarrativeManager.pickStorylet();\n            if (!_res) {\n                return this.error(\"No available storylets found.\");\n            }\n            storylet = _res.storylet;\n            npcs = _res.assignedNPCs;\n        }\n        let passage = null;\n        if (this.args.length >= 3) {\n            passage = this.args[2];\n        }\n        if (!storylet) {\n            return this.error(`Storylet not found: ${storyletId}`);\n        }\n        $(this.output).append($('<a>', { class: 'macro-link', text: message, click: () => {\n                storylet.start(npcs ?? {});\n                if (passage)\n                    storylet.next(passage);\n                Engine.play(\"Storylet\");\n            } }));\n        return true;\n    },\n});\nMacro.add(\"storyletLink\", {\n    handler() {\n        if (!State.variables.storylet) {\n            return this.error(\"No active storylet found.\");\n        }\n        const passageId = this.args[0];\n        const displayText = this.args[1];\n        $(this.output).wiki(`<<link \"${displayText}\" \"Storylet\">><<run $storylet.passage = \"${passageId}\">><</link>>`);\n        return true;\n    },\n});\nMacro.add(\"storyletClose\", {\n    handler() {\n        if (!State.variables.storylet) {\n            return this.error(\"No active storylet found.\");\n        }\n        $(this.output).wiki(`<<link \"Close\" \"Start\">><<= NarrativeManager.getStorylet($storylet.id).close()>><</link>>`);\n        return true;\n    }\n});\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/macros/storylets.ts?");

/***/ }),

/***/ "./src/scripts/macros/tabs.ts":
/*!************************************!*\
  !*** ./src/scripts/macros/tabs.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nMacro.add(\"tabs\", {\n    tags: [\"tab\"],\n    handler: function () {\n        var initialTab = this.args[0] || 0; // Default to the first tab if no argument provided\n        var $wrapper = $('<div class=\"tab-wrapper\"></div>');\n        var $tabList = $('<ul class=\"tab-list\"></ul>');\n        $wrapper.append($tabList);\n        // Create tabs\n        this.payload.slice(1).forEach(function (tab, index) {\n            var title = tab.args[0];\n            var $tabContent = $(`<div class=\"tab-content\" data-tab-index=\"${index}\">`).wiki(tab.contents);\n            var $tabItem = $(`<li class=\"tab-item\" data-tab-index=\"${index}\">${title}</li>`);\n            if (index === initialTab) {\n                $tabItem.addClass(\"active\");\n                $tabContent.show();\n            }\n            $tabList.append($tabItem);\n            $wrapper.append($tabContent);\n            $tabItem.on(\"click\", function () {\n                $wrapper.find(\".tab-content\").hide();\n                $wrapper.find(\".tab-item\").removeClass(\"active\");\n                $wrapper.find(`.tab-content[data-tab-index=\"${index}\"]`).show();\n                $(this).addClass(\"active\");\n            });\n        });\n        $(this.output).append($wrapper);\n        // Set initial active tab\n        $wrapper.find(`.tab-item[data-tab-index=\"${initialTab}\"]`).trigger(\"click\");\n    },\n});\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/macros/tabs.ts?");

/***/ }),

/***/ "./src/scripts/managers/narrativeManager.ts":
/*!**************************************************!*\
  !*** ./src/scripts/managers/narrativeManager.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NarrativeManager = void 0;\nconst storylet_1 = __webpack_require__(/*! ../models/storylet */ \"./src/scripts/models/storylet.ts\");\nconst database_1 = __webpack_require__(/*! ../utils/database */ \"./src/scripts/utils/database.ts\");\n// Instantiate the database manager\nconst storyletDBConfig = [{ name: 'storylets', keyPath: 'id' }];\nconst storyletDBManager = new database_1.DatabaseManager('NarrativeDatabase', 1, storyletDBConfig, new storylet_1.Storylet());\nclass NarrativeManager {\n    static storylets = {};\n    static playedStorylets = new Set();\n    static getStorylet(id) {\n        return NarrativeManager.storylets[id];\n    }\n    static async init() {\n        try {\n            const storylets = await storyletDBManager.getAll('storylets');\n            storylets.forEach((storylet) => {\n                NarrativeManager.storylets[storylet.id] = storylet;\n            });\n            console.log(\"Storylets initialized from database.\");\n        }\n        catch (error) {\n            console.error('Failed to initialize storylets from IndexedDB:', error);\n        }\n    }\n    static async clear() {\n        try {\n            await storyletDBManager.clear();\n            this.storylets = {};\n            console.log(\"Storylets cleared from database.\");\n        }\n        catch (error) {\n            console.error('Failed to clear IndexedDB:', error);\n        }\n    }\n    static async addStorylet(storylet, asPlayable = false) {\n        this.storylets[storylet.id] = storylet;\n        try {\n            await storyletDBManager.updateItem('storylets', storylet);\n            console.log(\"Storylet saved to database.\");\n        }\n        catch (error) {\n            console.error('Failed to save storylet to IndexedDB:', error);\n        }\n        if (asPlayable) {\n            State.variables.playableStorylets.add(storylet.id);\n        }\n    }\n    static addStorylets(storylets, asPlayable = false) {\n        storylets.forEach(async (storylet) => {\n            await this.addStorylet(storylet, asPlayable);\n        });\n    }\n    static get available() {\n        return new Set(Array.from(State.variables.playableStorylets)\n            .map(id => this.storylets[id])\n            .filter(storylet => {\n            const requirementsMet = !storylet.requirements || storylet.requirements.check();\n            const npcRequirementsMet = storylet.npcs ? State.variables.npcManager.findNPCs(storylet.npcs) !== null : true;\n            const isReplayableOrNew = storylet.replayable || !this.playedStorylets.has(storylet.id);\n            return requirementsMet && npcRequirementsMet && isReplayableOrNew;\n        }).map(storylet => storylet.id));\n    }\n    static pickStorylet(context = {}) {\n        if (State.variables.playableStorylets.size === 0) {\n            return undefined;\n        }\n        const availableStorylets = Array.from(State.variables.playableStorylets).map(id => this.storylets[id]);\n        if (availableStorylets.length === 0) {\n            return undefined;\n        }\n        // Group by priority to identify the highest available priority\n        const groupedByPriority = availableStorylets.reduce((acc, storylet) => {\n            const priority = storylet.priority || 0; // Default priority is 0 if not specified\n            if (!acc[priority])\n                acc[priority] = [];\n            acc[priority].push(storylet);\n            return acc;\n        }, {});\n        const highestPriority = Math.max(...Object.keys(groupedByPriority).map(Number));\n        // Select among the highest priority storylets based on weight\n        const highestPriorityStorylets = groupedByPriority[highestPriority];\n        const totalWeight = highestPriorityStorylets.reduce((sum, storylet) => sum + (storylet.weight || 1), 0);\n        // Generate a random number in the range of total weight\n        let random = Math.random() * totalWeight;\n        for (const storylet of highestPriorityStorylets) {\n            random -= storylet.weight || 1;\n            if (random <= 0) {\n                const assignedNPCs = State.variables.npcManager.findNPCs(storylet.npcs);\n                if (!assignedNPCs) {\n                    return undefined;\n                }\n                return { storylet, assignedNPCs };\n            }\n        }\n        let storylet = highestPriorityStorylets[0]; // Assuming random selection logic results in this storylet\n        const assignedNPCs = State.variables.npcManager.findNPCs(storylet.npcs);\n        if (!assignedNPCs) {\n            return undefined;\n        }\n        return { storylet, assignedNPCs };\n    }\n}\nexports.NarrativeManager = NarrativeManager;\n$(NarrativeManager.init);\nState.variables.playableStorylets = new Set();\nSetting.addToggle(\"clearStorylets\", {\n    label: \"Clear Storylets\",\n    default: false,\n    onChange: () => {\n        if (settings.clearStorylets) {\n            NarrativeManager.clear();\n        }\n        settings.clearStorylets = false;\n    },\n});\nwindow.NarrativeManager = NarrativeManager;\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/managers/narrativeManager.ts?");

/***/ }),

/***/ "./src/scripts/managers/npcManager.ts":
/*!********************************************!*\
  !*** ./src/scripts/managers/npcManager.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NPCManager = void 0;\nconst arrays_1 = __webpack_require__(/*! ../utils/arrays */ \"./src/scripts/utils/arrays.ts\");\nconst serialize_1 = __webpack_require__(/*! ../utils/serialize */ \"./src/scripts/utils/serialize.ts\");\nclass NPCManager extends serialize_1.Serializable {\n    npcs = {};\n    addNPC(npc) {\n        this.npcs[npc.id] = npc;\n    }\n    getNPC(id) {\n        return this.npcs[id];\n    }\n    findNPC(requirement) {\n        return Object.values(this.npcs).filter(npc => requirement.check(npc));\n    }\n    findNPCs(requirements) {\n        const keys = Object.keys(requirements);\n        const result = {};\n        const assignedNPCs = new Set();\n        if (this.assignNPCs(0, keys, requirements, result, assignedNPCs)) {\n            return result;\n        }\n        else {\n            return null; // No valid assignment was found\n        }\n    }\n    assignNPCs(index, keys, requirements, result, assignedNPCs) {\n        if (index === keys.length) {\n            return true; // All requirements have been successfully assigned\n        }\n        const key = keys[index];\n        let possibleNPCs = this.findNPC(requirements[key]).filter(npc => !assignedNPCs.has(npc.id));\n        // Shuffle possibleNPCs to randomize selection\n        (0, arrays_1.shuffleArray)(possibleNPCs);\n        for (const npc of possibleNPCs) {\n            assignedNPCs.add(npc.id);\n            result[key] = npc;\n            if (this.assignNPCs(index + 1, keys, requirements, result, assignedNPCs)) {\n                return true; // Found a valid assignment for all\n            }\n            // Backtrack\n            assignedNPCs.delete(npc.id);\n        }\n        return false; // No valid assignment for this requirement\n    }\n}\nexports.NPCManager = NPCManager;\nwindow.NPCManager = NPCManager;\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/managers/npcManager.ts?");

/***/ }),

/***/ "./src/scripts/models/npc.ts":
/*!***********************************!*\
  !*** ./src/scripts/models/npc.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NPC = void 0;\nconst serialize_1 = __webpack_require__(/*! ../utils/serialize */ \"./src/scripts/utils/serialize.ts\");\nclass NPC extends serialize_1.Serializable {\n    id;\n    firstName;\n    lastName;\n    experiences = [];\n    traits = {};\n    constructor(id, firstName, lastName, experiences, traits) {\n        super();\n        this.id = id;\n        this.firstName = firstName;\n        this.lastName = lastName;\n        if (experiences)\n            this.experiences = experiences;\n        if (traits)\n            this.traits = traits;\n    }\n    get fullName() {\n        return `${this.firstName} ${this.lastName}`;\n    }\n}\nexports.NPC = NPC;\nwindow.NPC = NPC;\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/models/npc.ts?");

/***/ }),

/***/ "./src/scripts/models/requirement.ts":
/*!*******************************************!*\
  !*** ./src/scripts/models/requirement.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.RequirementLastName = exports.RequirementVariableComp = exports.RequirementVariableComparator = exports.RequirementVariable = exports.RequirementAlways = exports.RequirementStoryletPlayed = exports.RequirementComposite = exports.RequirementCompositeOperator = exports.Requirement = void 0;\nconst narrativeManager_1 = __webpack_require__(/*! ../managers/narrativeManager */ \"./src/scripts/managers/narrativeManager.ts\");\nconst serialize_1 = __webpack_require__(/*! ../utils/serialize */ \"./src/scripts/utils/serialize.ts\");\nclass Requirement extends serialize_1.Serializable {\n    expected;\n    constructor(expected) {\n        super();\n        this.expected = expected;\n    }\n}\nexports.Requirement = Requirement;\nvar RequirementCompositeOperator;\n(function (RequirementCompositeOperator) {\n    RequirementCompositeOperator[\"AND\"] = \"AND\";\n    RequirementCompositeOperator[\"OR\"] = \"OR\";\n})(RequirementCompositeOperator || (exports.RequirementCompositeOperator = RequirementCompositeOperator = {}));\nclass RequirementComposite extends Requirement {\n    requirements;\n    operator;\n    constructor(requirements, operator = RequirementCompositeOperator.AND, expected = true) {\n        super(expected);\n        this.requirements = requirements;\n        this.operator = operator;\n    }\n    check(...context) {\n        if (this.operator === RequirementCompositeOperator.AND) {\n            return this.requirements.every((requirement) => requirement.check(...context) === this.expected);\n        }\n        else {\n            return this.requirements.some((requirement) => requirement.check(...context) === this.expected);\n        }\n    }\n    display() {\n        const operatorString = this.operator === RequirementCompositeOperator.AND ? \"AND\" : \"OR\";\n        const requirementsDisplay = this.requirements.map(req => req.display());\n        const $container = $('<span></span>');\n        for (let i = 0; i < requirementsDisplay.length; i++) {\n            $container.append(requirementsDisplay[i]);\n            if (i < requirementsDisplay.length - 1) {\n                $container.append(`<span class=\"${operatorString.toLowerCase()}\">${operatorString}</span>`);\n            }\n        }\n        return $container;\n    }\n}\nexports.RequirementComposite = RequirementComposite;\nclass RequirementStoryletPlayed extends Requirement {\n    storyletId;\n    constructor(storyletId, expected = true) {\n        super(expected);\n        this.storyletId = storyletId;\n    }\n    check() {\n        return narrativeManager_1.NarrativeManager.playedStorylets.has(this.storyletId) === this.expected;\n    }\n    display() {\n        const playedString = this.expected ? \"played\" : \"not played\";\n        return $(`<span>Storylet \"${this.storyletId}\" ${playedString}</span>`);\n    }\n}\nexports.RequirementStoryletPlayed = RequirementStoryletPlayed;\nclass RequirementAlways extends Requirement {\n    constructor(expected = true) {\n        super(expected);\n    }\n    check() {\n        return this.expected;\n    }\n    display() {\n        return $('<span>Always</span>');\n    }\n}\nexports.RequirementAlways = RequirementAlways;\nclass RequirementVariable extends Requirement {\n    variable;\n    requirement;\n    constructor(variable, requirement, expected = true) {\n        super(expected);\n        this.variable = variable;\n        this.requirement = requirement;\n    }\n    check() {\n        return this.requirement.check(State.getVar(this.variable));\n    }\n    display() {\n        return $(`<span>${this.variable} </span>`).add(this.requirement.display());\n    }\n}\nexports.RequirementVariable = RequirementVariable;\nvar RequirementVariableComparator;\n(function (RequirementVariableComparator) {\n    RequirementVariableComparator[\"EQ\"] = \"==\";\n    RequirementVariableComparator[\"NE\"] = \"!=\";\n    RequirementVariableComparator[\"GT\"] = \">\";\n    RequirementVariableComparator[\"GTE\"] = \">=\";\n    RequirementVariableComparator[\"LT\"] = \"<\";\n    RequirementVariableComparator[\"LTE\"] = \"<=\";\n})(RequirementVariableComparator || (exports.RequirementVariableComparator = RequirementVariableComparator = {}));\nclass RequirementVariableComp extends Requirement {\n    comparator;\n    expectedValue;\n    constructor(comparator, expectedValue, expected = true) {\n        super(expected);\n        this.comparator = comparator;\n        this.expectedValue = expectedValue;\n    }\n    _check(currentValue) {\n        switch (this.comparator) {\n            case RequirementVariableComparator.EQ:\n                return currentValue === this.expectedValue;\n            case RequirementVariableComparator.NE:\n                return currentValue !== this.expectedValue;\n            case RequirementVariableComparator.GT:\n                return currentValue > this.expectedValue;\n            case RequirementVariableComparator.GTE:\n                return currentValue >= this.expectedValue;\n            case RequirementVariableComparator.LT:\n                return currentValue < this.expectedValue;\n            case RequirementVariableComparator.LTE:\n                return currentValue <= this.expectedValue;\n        }\n    }\n    check(currentValue) {\n        return this._check(currentValue) === this.expected;\n    }\n    display() {\n        return $(`<span>${this.comparator} ${this.expectedValue}</span>`);\n    }\n}\nexports.RequirementVariableComp = RequirementVariableComp;\nclass RequirementLastName extends Requirement {\n    lastName;\n    constructor(lastName, expected = true) {\n        super(expected);\n        this.lastName = lastName;\n    }\n    check(npc) {\n        return (npc.lastName === this.lastName) === this.expected;\n    }\n    display() {\n        return $(`<span>Last name is ${this.lastName}</span>`);\n    }\n}\nexports.RequirementLastName = RequirementLastName;\nMacro.add(\"requirement\", {\n    handler() {\n        // displays a requirement passed as an argument\n        const requirement = this.args[0];\n        if (!(requirement instanceof Requirement)) {\n            return;\n        }\n        $(this.output).append(requirement.display());\n    }\n});\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/models/requirement.ts?");

/***/ }),

/***/ "./src/scripts/models/storylet.ts":
/*!****************************************!*\
  !*** ./src/scripts/models/storylet.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Storylet = void 0;\nconst serialize_1 = __webpack_require__(/*! ../utils/serialize */ \"./src/scripts/utils/serialize.ts\");\nclass Storylet extends serialize_1.Serializable {\n    id;\n    title;\n    author;\n    passages;\n    startPassage;\n    weight;\n    priority;\n    requirements;\n    replayable;\n    npcs;\n    tags;\n    constructor(id = \"error:missingId\", title = \"Untitled\", author = \"unkown\", passages = {}, startPassage = \"start\", weight = 1, priority = 0, requirements = undefined, replayable = true, npcs = {}, tags = new Set()) {\n        super();\n        this.id = id;\n        this.title = title;\n        this.author = author;\n        this.passages = passages;\n        this.startPassage = startPassage;\n        this.weight = weight;\n        this.priority = priority;\n        this.requirements = requirements;\n        this.replayable = replayable;\n        this.npcs = npcs;\n        this.tags = tags;\n        if (this.id.startsWith(\"base:\")) {\n            this.tags.add(\"base\");\n        }\n        this.passages = Object.keys(passages).reduce((acc, key) => {\n            if (Story.has(key)) {\n                acc[key] = Story.get(key).text;\n            }\n            else {\n                acc[key] = passages[key] || \"\";\n            }\n            return acc;\n        }, {});\n    }\n    start(npcs) {\n        State.variables.storylet = {\n            id: this.id,\n            passage: this.startPassage,\n            npcs,\n        };\n    }\n    next(passage) {\n        if (!State.variables.storylet) {\n            throw new Error(\"Storylet not started\");\n        }\n        State.variables.storylet = {\n            id: this.id,\n            passage,\n            npcs: State.variables.storylet.npcs,\n        };\n    }\n    close() {\n        delete State.variables.storylet;\n    }\n}\nexports.Storylet = Storylet;\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/models/storylet.ts?");

/***/ }),

/***/ "./src/scripts/utils/arrays.ts":
/*!*************************************!*\
  !*** ./src/scripts/utils/arrays.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.shuffleArray = shuffleArray;\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]]; // swap elements\n    }\n}\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/utils/arrays.ts?");

/***/ }),

/***/ "./src/scripts/utils/database.ts":
/*!***************************************!*\
  !*** ./src/scripts/utils/database.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DatabaseManager = void 0;\nclass DatabaseManager {\n    name;\n    version;\n    objectStores;\n    emptyValue;\n    db = null;\n    constructor(name, version, objectStores, emptyValue) {\n        this.name = name;\n        this.version = version;\n        this.objectStores = objectStores;\n        this.emptyValue = emptyValue;\n    }\n    async ensureDatabase() {\n        if (!this.db) {\n            return this.open();\n        }\n        return this.db;\n    }\n    async open() {\n        if (!window.indexedDB) {\n            throw new Error('IndexedDB is not supported by this browser.');\n        }\n        const request = window.indexedDB.open(this.name, this.version);\n        return new Promise((resolve, reject) => {\n            request.onerror = (event) => {\n                console.error(\"Database error:\", event.target.error?.message);\n                reject(new Error('Database error: ' + event.target.error?.message));\n            };\n            request.onsuccess = (event) => {\n                this.db = event.target.result;\n                resolve(this.db);\n            };\n            request.onupgradeneeded = (event) => {\n                const db = event.target.result;\n                this.objectStores.forEach(store => {\n                    if (!db.objectStoreNames.contains(store.name)) {\n                        db.createObjectStore(store.name, { keyPath: store.keyPath });\n                        console.log(`Creating object store: ${store.name}`);\n                    }\n                });\n            };\n        });\n    }\n    close() {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n        }\n    }\n    async addItem(storeName, item) {\n        const dataToStore = { id: item.id, data: JSON.stringify(item) };\n        return this.performWriteOperation(storeName, dataToStore, 'add');\n    }\n    async updateItem(storeName, item) {\n        const dataToStore = { id: item.id, data: JSON.stringify(item) };\n        return this.performWriteOperation(storeName, dataToStore, 'put');\n    }\n    async deleteItem(storeName, key) {\n        return this.performWriteOperation(storeName, key, 'delete');\n    }\n    async getItem(storeName, key) {\n        return this.performReadOperation(storeName, key, 'get');\n    }\n    async getAll(storeName) {\n        return this.performReadOperation(storeName, null, 'getAll');\n    }\n    async clear() {\n        try {\n            await this.ensureDatabase();\n            const transaction = this.db.transaction(this.objectStores.map(os => os.name), 'readwrite');\n            const clearPromises = this.objectStores.map(storeConfig => {\n                const store = transaction.objectStore(storeConfig.name);\n                return store.clear();\n            });\n            return Promise.all(clearPromises).then(() => {\n                console.log(\"All stores cleared successfully.\");\n            });\n        }\n        finally {\n            this.close();\n        }\n    }\n    async performWriteOperation(storeName, data, operation) {\n        try {\n            await this.ensureDatabase();\n            const transaction = this.db.transaction([storeName], 'readwrite');\n            const store = transaction.objectStore(storeName);\n            const request = (operation === 'delete') ? store.delete(data) : store[operation](data);\n            return new Promise((resolve, reject) => {\n                request.onsuccess = () => {\n                    console.log(`Item ${operation}ed successfully.`);\n                    resolve();\n                };\n                request.onerror = (event) => {\n                    console.error(`Error ${operation}ing item:`, event.target.error?.message);\n                    reject(new Error(`Error ${operation}ing item: ` + event.target.error?.message));\n                };\n            });\n        }\n        finally {\n            this.close();\n        }\n    }\n    async performReadOperation(storeName, key, operation) {\n        try {\n            await this.ensureDatabase();\n            const transaction = this.db.transaction([storeName], 'readonly');\n            const store = transaction.objectStore(storeName);\n            const request = (operation === 'get') ? store.get(key) : store.getAll();\n            return new Promise((resolve, reject) => {\n                request.onsuccess = () => {\n                    const results = request.result;\n                    const parsedResults = (operation === 'getAll') ? results.map((res) => JSON.parse(res.data)) : JSON.parse(results.data);\n                    resolve(parsedResults);\n                    console.log(`Item(s) ${operation} successfully.`);\n                };\n                request.onerror = (event) => {\n                    console.error(`Error ${operation} item:`, event.target.error?.message);\n                    reject(new Error(`Error ${operation} item: ` + event.target.error?.message));\n                };\n            });\n        }\n        finally {\n            this.close();\n        }\n    }\n}\nexports.DatabaseManager = DatabaseManager;\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/utils/database.ts?");

/***/ }),

/***/ "./src/scripts/utils/serialize.ts":
/*!****************************************!*\
  !*** ./src/scripts/utils/serialize.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Serializable = void 0;\nclass Serializable {\n    constructor() { }\n    _init(data) {\n        Object.keys(data).forEach(key => {\n            this[key] = clone(data[key]);\n        });\n        return this;\n    }\n    clone() { return Object.create(Object.getPrototypeOf(this))._init(this); }\n    toJSON() {\n        // Create object with all properties\n        let obj = Object.keys(this).reduce((acc, key) => {\n            acc[key] = clone(this[key]);\n            return acc;\n        }, {});\n        return JSON.reviveWrapper(`(new ${this.constructor.name}())._init($ReviveData$)`, obj);\n    }\n}\nexports.Serializable = Serializable;\n\n\n//# sourceURL=webpack://in-transition/./src/scripts/utils/serialize.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/scripts/index.ts");
/******/ 	
/******/ })()
;